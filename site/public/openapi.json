{
  "openapi": "3.0.0",
  "info": {
    "title": "Sushi API",
    "description": "Documentation for interacting with the Sushi API",
    "version": "7.0.0"
  },
  "servers": [
    {
      "url": "https://api.sushi.com",
      "description": "Sushi API"
    },
    {
      "url": "https://virtserver.swaggerhub.com/sushi-labs/sushi/7.0.0",
      "description": "SwaggerHub API Auto Mocking"
    }
  ],
  "tags": [
    {
      "name": "swap",
      "description": "All swap endpoints"
    },
    {
      "name": "price",
      "description": "All price endpoints"
    },
    {
      "name": "token",
      "description": "All token endpoints"
    },
    {
      "name": "liquidity-providers",
      "description": "All liquidity provider endpoints"
    }
  ],
  "paths": {
    "/quote/v7/{chainId}": {
      "get": {
        "tags": ["swap"],
        "summary": "generates a quote",
        "description": "By passing in the appropriate options, you can generate a swap quote\n",
        "operationId": "quote",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "chainId",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "referrer",
            "in": "query",
            "description": "referrer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenIn",
            "in": "query",
            "description": "input token address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenOut",
            "in": "query",
            "description": "output token address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "input token amount",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int256"
            }
          },
          {
            "name": "fee",
            "in": "query",
            "description": "amount of the fee, for example 0.0025 (0.25%)",
            "required": false,
            "schema": {
              "maximum": 0.5,
              "minimum": 0,
              "type": "number",
              "default": 0.0025
            }
          },
          {
            "name": "feeBy",
            "in": "query",
            "description": "if fee > 0 then which token to take fee from input or output",
            "required": false,
            "schema": {
              "type": "string",
              "default": "output",
              "enum": ["input", "output"]
            }
          },
          {
            "name": "maxPriceImpact",
            "in": "query",
            "description": "the max price impact for route planning. It's better to set it to a reasonable value, for example 1 (100%)",
            "required": false,
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "maxSlippage",
            "in": "query",
            "description": "the max slippage for route execution, for example 0.005 (0.5%)",
            "required": false,
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "number",
              "default": 0.005
            }
          },
          {
            "name": "onlyDEX",
            "in": "query",
            "description": "a list of DEX names separated by comma. If exists in the request then only pools from these DEXes are used in the response route. List of all supported DEXes can be obtained with /liquidity-provider request",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPools",
            "in": "query",
            "description": "a list of pools addresses separated by comma. If exists in the request then only these pools are used in the response route",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visualize",
            "in": "query",
            "description": "visulaization",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "quote",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "Success",
                    "tokens": [
                      {
                        "address": 1.364068194842176e48,
                        "symbol": "ETH",
                        "name": "Ether",
                        "decimals": 18
                      },
                      {
                        "address": 1.0970776880180083e48,
                        "symbol": "WETH",
                        "name": "Wrapped Ether",
                        "decimals": 18
                      },
                      {
                        "address": 6.120569339260443e47,
                        "symbol": "SUSHI",
                        "name": "SushiToken",
                        "decimals": 18
                      }
                    ],
                    "tokenFrom": 0,
                    "tokenTo": 2,
                    "swapPrice": 2837.6709246572527,
                    "priceImpact": -0.002204113661183449,
                    "amountIn": "10000000000000000",
                    "assumedAmountOut": "28376709246572527616"
                  }
                }
              }
            }
          },
          "422": {
            "description": "request parameters invalid"
          },
          "500": {
            "description": "internal server error"
          },
          "529": {
            "description": "server overloaded"
          }
        }
      }
    },
    "/swap/v7/{chainId}": {
      "get": {
        "tags": ["swap"],
        "summary": "generates a swap",
        "description": "By passing in the appropriate options, you can generate a swap transaction\n",
        "operationId": "swap",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "chainId",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "referrer",
            "in": "query",
            "description": "referrer",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenIn",
            "in": "query",
            "description": "input token address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tokenOut",
            "in": "query",
            "description": "output token address",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sender",
            "in": "query",
            "description": "sender of transaction",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipient",
            "in": "query",
            "description": "recipient of tokens, defaults to sender",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amount",
            "in": "query",
            "description": "input token amount",
            "required": true,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int256"
            }
          },
          {
            "name": "fee",
            "in": "query",
            "description": "amount of the fee, for example 0.0025 (0.25%)",
            "required": false,
            "schema": {
              "maximum": 0.5,
              "minimum": 0,
              "type": "number",
              "default": 0.0025
            }
          },
          {
            "name": "feeReceiver",
            "in": "query",
            "description": "if fee > 0 then receiver of the fee",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feeBy",
            "in": "query",
            "description": "if fee > 0 then which token to take fee from input or output",
            "required": false,
            "schema": {
              "type": "string",
              "default": "output",
              "enum": ["input", "output"]
            }
          },
          {
            "name": "maxPriceImpact",
            "in": "query",
            "description": "the max price impact for route planning. It's better to set it to a reasonable value, for example 1 (100%)",
            "required": false,
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "number",
              "default": 1
            }
          },
          {
            "name": "maxSlippage",
            "in": "query",
            "description": "the max slippage for route execution, for example 0.005 (0.5%)",
            "required": false,
            "schema": {
              "maximum": 1,
              "minimum": 0,
              "type": "number",
              "default": 0.005
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "the source of router liquidity",
            "required": false,
            "schema": {
              "type": "string",
              "default": "sender",
              "enum": ["sender", "self"]
            }
          },
          {
            "name": "onlyDEX",
            "in": "query",
            "description": "a list of DEX names separated by comma. If exists in the request then only pools from these DEXes are used in the response route. List of all supported DEXes can be obtained with /liquidity-provider request",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlyPools",
            "in": "query",
            "description": "a list of pools addresses separated by comma. If exists in the request then only these pools are used in the response route",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "simulate",
            "in": "query",
            "description": "simulate",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "validate",
            "in": "query",
            "description": "validate sender has balance & allowance of token if simulation fails",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "route data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "status": "Success",
                    "tokens": [
                      {
                        "address": 1.364068194842176e48,
                        "symbol": "ETH",
                        "name": "Ether",
                        "decimals": 18
                      },
                      {
                        "address": 1.0970776880180083e48,
                        "symbol": "WETH",
                        "name": "Wrapped Ether",
                        "decimals": 18
                      },
                      {
                        "address": 6.120569339260443e47,
                        "symbol": "SUSHI",
                        "name": "SushiToken",
                        "decimals": 18
                      }
                    ],
                    "tokenFrom": 0,
                    "tokenTo": 2,
                    "swapPrice": 2837.6709246572527,
                    "priceImpact": -0.002204113661183449,
                    "amountIn": "10000000000000000",
                    "assumedAmountOut": "28376709246572527616",
                    "tx": {
                      "from": 1.2380129724542482e48,
                      "to": 9.83650862853668e47,
                      "gas": "162561",
                      "gasPrice": 682394289,
                      "data": "0x5f3bd1c8000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000006b3595068778dd592e39a122f4f5a5cf09c90fe20000000000000000000000000000000000000000000000018969823f2df6281000000000000000000000000085cd07ea01423b1e937929b44e4ad8c40bbb5e7100000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001a4dd9c5f96000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000006b3595068778dd592e39a122f4f5a5cf09c90fe200000000000000000000000000000000000000000000000189ce52b6a87f80000000000000000000000000000000000000000000000000018969823f2df62810000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa960450000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000700301ffff0201CE84867c3c02B05dc570d0135103d3fB9CC19433C02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc204C02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc200CE84867c3c02B05dc570d0135103d3fB9CC194330085CD07Ea01423b1E937929B44E4Ad8c40BbB5E71000bb80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                      "value": "10000000000000000"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "request parameters invalid"
          },
          "500": {
            "description": "internal server error"
          },
          "529": {
            "description": "server overloaded"
          }
        }
      }
    },
    "/price/v1/{chainId}": {
      "get": {
        "tags": ["price"],
        "summary": "returns prices for specified chainId",
        "description": "By passing in a chainId, you can get dollar prices for tokens addresses\n",
        "operationId": "prices",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "chainId",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "an address to price object map",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "number"
                  },
                  "example": {
                    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2": 2360.066696167956
                  }
                }
              }
            }
          },
          "422": {
            "description": "request parameters invalid"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/price/v1/{chainId}/{tokenAddress}": {
      "get": {
        "tags": ["price"],
        "summary": "returns price for specified chainId and token",
        "description": "By passing in a chainId and address, you can get a dollar price for specified token address\n",
        "operationId": "price",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "chainId",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "tokenAddress",
            "in": "path",
            "description": "token address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "numerical price",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                },
                "example": 2360.066696167956
              }
            }
          },
          "422": {
            "description": "request parameters invalid"
          },
          "500": {
            "description": "internal server error"
          }
        }
      }
    },
    "/token/v1/{chainId}/{tokenAddress}": {
      "get": {
        "tags": ["token"],
        "summary": "returns token data for specified chainId and token",
        "description": "By passing in a chainId and address, you can get token data for specified token address\n",
        "operationId": "token",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "chainId",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "tokenAddress",
            "in": "path",
            "description": "token address",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "token data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "example": {
                    "chainId": 1,
                    "address": 6.120569339260443e47,
                    "decimals": 18,
                    "name": "Sushi Token",
                    "symbol": "SUSHI"
                  }
                }
              }
            }
          },
          "422": {
            "description": "request parameters invalid"
          },
          "500": {
            "description": "internal server error"
          },
          "529": {
            "description": "server overloaded"
          }
        }
      }
    },
    "/liquidity-providers/v7/{chainId}": {
      "get": {
        "tags": ["liquidity-providers"],
        "summary": "Returns all available liquidity providers for the specified chainId",
        "description": "By passing in a chainId you can get the enabled liquidity providers.\n",
        "operationId": "getLiquidityProviders",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "chainId",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "liquidity providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "example": [
                    "UniswapV2",
                    "SushiSwapV2",
                    "PancakeSwap",
                    "Elk",
                    "Kwikswap",
                    "ShibaSwap",
                    "CroDefiSwap",
                    "UniswapV3",
                    "SushiSwapV3",
                    "PancakeSwapV3",
                    "Wagmi",
                    "CurveSwap"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "422": {
            "description": "request parameters invalid."
          },
          "500": {
            "description": "internal server error."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {},
    "parameters": {
      "tokenAddress": {
        "name": "tokenAddress",
        "in": "path",
        "description": "token address",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "chainId": {
        "name": "chainId",
        "in": "path",
        "description": "chainId",
        "required": true,
        "schema": {
          "type": "number"
        }
      },
      "referrer": {
        "name": "referrer",
        "in": "query",
        "description": "referrer",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "tokenIn": {
        "name": "tokenIn",
        "in": "query",
        "description": "input token address",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "tokenOut": {
        "name": "tokenOut",
        "in": "query",
        "description": "output token address",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "sender": {
        "name": "sender",
        "in": "query",
        "description": "sender of transaction",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "recipient": {
        "name": "recipient",
        "in": "query",
        "description": "recipient of tokens, defaults to sender",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "amount": {
        "name": "amount",
        "in": "query",
        "description": "input token amount",
        "required": true,
        "schema": {
          "minimum": 1,
          "type": "integer",
          "format": "int256"
        }
      },
      "fee": {
        "name": "fee",
        "in": "query",
        "description": "amount of the fee, for example 0.0025 (0.25%)",
        "required": false,
        "schema": {
          "maximum": 0.5,
          "minimum": 0,
          "type": "number",
          "default": 0.0025
        }
      },
      "feeBy": {
        "name": "feeBy",
        "in": "query",
        "description": "if fee > 0 then which token to take fee from input or output",
        "required": false,
        "schema": {
          "type": "string",
          "default": "output",
          "enum": ["input", "output"]
        }
      },
      "feeReceiver": {
        "name": "feeReceiver",
        "in": "query",
        "description": "if fee > 0 then receiver of the fee",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "maxPriceImpact": {
        "name": "maxPriceImpact",
        "in": "query",
        "description": "the max price impact for route planning. It's better to set it to a reasonable value, for example 1 (100%)",
        "required": false,
        "schema": {
          "maximum": 1,
          "minimum": 0,
          "type": "number",
          "default": 1
        }
      },
      "maxSlippage": {
        "name": "maxSlippage",
        "in": "query",
        "description": "the max slippage for route execution, for example 0.005 (0.5%)",
        "required": false,
        "schema": {
          "maximum": 1,
          "minimum": 0,
          "type": "number",
          "default": 0.005
        }
      },
      "source": {
        "name": "source",
        "in": "query",
        "description": "the source of router liquidity",
        "required": false,
        "schema": {
          "type": "string",
          "default": "sender",
          "enum": ["sender", "self"]
        }
      },
      "onlyDEX": {
        "name": "onlyDEX",
        "in": "query",
        "description": "a list of DEX names separated by comma. If exists in the request then only pools from these DEXes are used in the response route. List of all supported DEXes can be obtained with /liquidity-provider request",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "onlyPools": {
        "name": "onlyPools",
        "in": "query",
        "description": "a list of pools addresses separated by comma. If exists in the request then only these pools are used in the response route",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "visualize": {
        "name": "visualize",
        "in": "query",
        "description": "visulaization",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "simulate": {
        "name": "simulate",
        "in": "query",
        "description": "simulate",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "validate": {
        "name": "validate",
        "in": "query",
        "description": "validate sender has balance & allowance of token if simulation fails",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      }
    }
  }
}
