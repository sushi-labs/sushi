import { zeroAddress } from 'viem'
import type { Address } from 'viem'
import type { EvmCurrency } from '~/evm/currency/currency.js'
import { EvmChainId } from '~evm/chain/index.js'
import { EvmToken } from '~evm/currency/token.js'
import { WETH9, WETH9_ADDRESS } from './tokens/WETH9.js'
import { WRBTC, WRBTC_ADDRESS } from './tokens/WRBTC.js'

export const WNATIVE_ADDRESS = {
  [EvmChainId.ETHEREUM]: WETH9_ADDRESS[EvmChainId.ETHEREUM],
  [EvmChainId.SEPOLIA]: WETH9_ADDRESS[EvmChainId.SEPOLIA],
  [EvmChainId.OPTIMISM]: WETH9_ADDRESS[EvmChainId.OPTIMISM],
  [EvmChainId.ARBITRUM]: WETH9_ADDRESS[EvmChainId.ARBITRUM],
  [EvmChainId.ARBITRUM_SEPOLIA]: WETH9_ADDRESS[EvmChainId.ARBITRUM_SEPOLIA],
  [EvmChainId.FANTOM]: '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83',
  [EvmChainId.POLYGON]: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',
  [EvmChainId.GNOSIS]: '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d',
  [EvmChainId.BSC]: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',
  [EvmChainId.AVALANCHE]: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',
  [EvmChainId.HARMONY]: '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',
  [EvmChainId.CELO]: '0x471EcE3750Da237f93B8E339c536989b8978a438',
  [EvmChainId.KAVA]: '0xc86c7C0eFbd6A49B35E8714C5f59D99De09A225b',
  [EvmChainId.METIS]: '0x75cb093E4D61d2A2e65D8e0BBb01DE8d89b53481',
  [EvmChainId.ARBITRUM_NOVA]: WETH9_ADDRESS[EvmChainId.ARBITRUM_NOVA],
  [EvmChainId.BOBA]: WETH9_ADDRESS[EvmChainId.BOBA],
  [EvmChainId.BOBA_BNB]: '0xC58aaD327D6D58D979882601ba8DDa0685B505eA',
  [EvmChainId.BTTC]: '0x23181F21DEa5936e24163FFABa4Ea3B316B57f3C',
  [EvmChainId.POLYGON_ZKEVM]: WETH9_ADDRESS[EvmChainId.POLYGON_ZKEVM],
  [EvmChainId.THUNDERCORE]: '0x413cEFeA29F2d07B8F2acFA69d92466B9535f717',
  [EvmChainId.FILECOIN]: '0x60E1773636CF5E4A227d9AC24F20fEca034ee25A',
  [EvmChainId.HAQQ]: '0xeC8CC083787c6e5218D86f9FF5f28d4cC377Ac54',
  [EvmChainId.CORE]: '0x40375C92d9FAf44d2f9db9Bd9ba41a3317a2404f',
  [EvmChainId.ZKSYNC_ERA]: WETH9_ADDRESS[EvmChainId.ZKSYNC_ERA],
  [EvmChainId.LINEA]: WETH9_ADDRESS[EvmChainId.LINEA],
  [EvmChainId.BASE]: WETH9_ADDRESS[EvmChainId.BASE],
  [EvmChainId.SCROLL]: WETH9_ADDRESS[EvmChainId.SCROLL],
  [EvmChainId.ZETACHAIN]: '0x5F0b1a82749cb4E2278EC87F8BF6B618dC71a8bf',
  [EvmChainId.CRONOS]: '0x5C7F8A570d578ED84E63fdFA7b1eE72dEae1AE23',
  [EvmChainId.BLAST]: WETH9_ADDRESS[EvmChainId.BLAST],
  [EvmChainId.SKALE_EUROPA]: zeroAddress,
  [EvmChainId.ROOTSTOCK]: WRBTC_ADDRESS[EvmChainId.ROOTSTOCK],
  [EvmChainId.MANTLE]: '0x78c1b0C915c4FAA5FffA6CAbf0219DA63d7f4cb8',
  [EvmChainId.MANTA]: WETH9_ADDRESS[EvmChainId.MANTA],
  [EvmChainId.MODE]: WETH9_ADDRESS[EvmChainId.MODE],
  [EvmChainId.TAIKO]: WETH9_ADDRESS[EvmChainId.TAIKO],
  [EvmChainId.ZKLINK]: WETH9_ADDRESS[EvmChainId.ZKLINK],
  [EvmChainId.APE]: '0x48b62137EdfA95a428D35C09E44256a739F6B557',
  [EvmChainId.SONIC]: '0x039e2fB66102314Ce7b64Ce5Ce3E5183bc94aD38',
  [EvmChainId.HEMI]: WETH9_ADDRESS[EvmChainId.HEMI],
  [EvmChainId.TATARA]: WETH9_ADDRESS[EvmChainId.TATARA],
  [EvmChainId.KATANA]: WETH9_ADDRESS[EvmChainId.KATANA],
  [EvmChainId.HYPEREVM]: WETH9_ADDRESS[EvmChainId.HYPEREVM],
} as const satisfies Record<EvmChainId, Address>

export const WNATIVE = {
  [EvmChainId.ETHEREUM]: WETH9[EvmChainId.ETHEREUM],
  [EvmChainId.SEPOLIA]: WETH9[EvmChainId.SEPOLIA],
  [EvmChainId.OPTIMISM]: WETH9[EvmChainId.OPTIMISM],
  [EvmChainId.FANTOM]: new EvmToken({
    chainId: EvmChainId.FANTOM,
    address: WNATIVE_ADDRESS[EvmChainId.FANTOM],
    decimals: 18,
    symbol: 'WFTM',
    name: 'Wrapped FTM',
  }),
  [EvmChainId.POLYGON]: new EvmToken({
    chainId: EvmChainId.POLYGON,
    address: WNATIVE_ADDRESS[EvmChainId.POLYGON],
    decimals: 18,
    symbol: 'WPOL',
    name: 'Wrapped POL',
  }),
  [EvmChainId.GNOSIS]: new EvmToken({
    chainId: EvmChainId.GNOSIS,
    address: WNATIVE_ADDRESS[EvmChainId.GNOSIS],
    decimals: 18,
    symbol: 'WXDAI',
    name: 'Wrapped xDai',
  }),
  [EvmChainId.BSC]: new EvmToken({
    chainId: EvmChainId.BSC,
    address: WNATIVE_ADDRESS[EvmChainId.BSC],
    decimals: 18,
    symbol: 'WBNB',
    name: 'Wrapped BNB',
  }),
  [EvmChainId.ARBITRUM]: WETH9[EvmChainId.ARBITRUM],
  [EvmChainId.ARBITRUM_SEPOLIA]: WETH9[EvmChainId.ARBITRUM_SEPOLIA],
  [EvmChainId.ARBITRUM_NOVA]: WETH9[EvmChainId.ARBITRUM_NOVA],
  [EvmChainId.AVALANCHE]: new EvmToken({
    chainId: EvmChainId.AVALANCHE,
    address: WNATIVE_ADDRESS[EvmChainId.AVALANCHE],
    decimals: 18,
    symbol: 'WAVAX',
    name: 'Wrapped AVAX',
  }),
  [EvmChainId.HARMONY]: new EvmToken({
    chainId: EvmChainId.HARMONY,
    address: WNATIVE_ADDRESS[EvmChainId.HARMONY],
    decimals: 18,
    symbol: 'WONE',
    name: 'Wrapped ONE',
  }),
  [EvmChainId.CELO]: new EvmToken({
    chainId: EvmChainId.CELO,
    address: WNATIVE_ADDRESS[EvmChainId.CELO],
    decimals: 18,
    symbol: 'CELO',
    name: 'Celo',
  }),
  [EvmChainId.KAVA]: new EvmToken({
    chainId: EvmChainId.KAVA,
    address: WNATIVE_ADDRESS[EvmChainId.KAVA],
    decimals: 18,
    symbol: 'WKAVA',
    name: 'Wrapped Kava',
  }),
  [EvmChainId.METIS]: new EvmToken({
    chainId: EvmChainId.METIS,
    address: WNATIVE_ADDRESS[EvmChainId.METIS],
    decimals: 18,
    symbol: 'WMETIS',
    name: 'Wrapped Metis',
  }),
  [EvmChainId.BOBA]: WETH9[EvmChainId.BOBA],
  [EvmChainId.BOBA_BNB]: new EvmToken({
    chainId: EvmChainId.BOBA_BNB,
    address: WNATIVE_ADDRESS[EvmChainId.BOBA_BNB],
    decimals: 18,
    symbol: 'WBOBA',
    name: 'Wrapped Boba',
  }),
  [EvmChainId.BTTC]: new EvmToken({
    chainId: EvmChainId.BTTC,
    address: WNATIVE_ADDRESS[EvmChainId.BTTC],
    decimals: 18,
    symbol: 'WBTT',
    name: 'Wrapped BitTorrent Token',
  }),
  // [EvmChainId.SEPOLIA]: WETH9[EvmChainId.SEPOLIA],
  // [EvmChainId.CONSENSUS_ZKEVM_TESTNET]: WETH9[EvmChainId.CONSENSUS_ZKEVM_TESTNET],
  // [EvmChainId.SCROLL_ALPHA_TESTNET]: WETH9[EvmChainId.SCROLL_ALPHA_TESTNET],
  // [EvmChainId.BASE_TESTNET]: WETH9[EvmChainId.BASE_TESTNET],
  [EvmChainId.THUNDERCORE]: new EvmToken({
    chainId: EvmChainId.THUNDERCORE,
    address: WNATIVE_ADDRESS[EvmChainId.THUNDERCORE],
    decimals: 18,
    symbol: 'WTT',
    name: 'Wrapped Thunder Token',
  }),
  [EvmChainId.POLYGON_ZKEVM]: WETH9[EvmChainId.POLYGON_ZKEVM],
  [EvmChainId.HAQQ]: new EvmToken({
    chainId: EvmChainId.HAQQ,
    address: WNATIVE_ADDRESS[EvmChainId.HAQQ],
    decimals: 18,
    symbol: 'WISLM',
    name: 'Wrapped Islamic Coin',
  }),
  [EvmChainId.CORE]: new EvmToken({
    chainId: EvmChainId.CORE,
    address: WNATIVE_ADDRESS[EvmChainId.CORE],
    decimals: 18,
    symbol: 'WCORE',
    name: 'Wrapped Core',
  }),
  [EvmChainId.ZKSYNC_ERA]: WETH9[EvmChainId.ZKSYNC_ERA],
  [EvmChainId.LINEA]: WETH9[EvmChainId.LINEA],
  [EvmChainId.BASE]: WETH9[EvmChainId.BASE],
  [EvmChainId.SCROLL]: WETH9[EvmChainId.SCROLL],
  [EvmChainId.FILECOIN]: new EvmToken({
    chainId: EvmChainId.FILECOIN,
    address: WNATIVE_ADDRESS[EvmChainId.FILECOIN],
    decimals: 18,
    symbol: 'WFIL',
    name: 'Wrapped FIL',
  }),
  [EvmChainId.ZETACHAIN]: new EvmToken({
    chainId: EvmChainId.ZETACHAIN,
    address: WNATIVE_ADDRESS[EvmChainId.ZETACHAIN],
    decimals: 18,
    symbol: 'WZETA',
    name: 'Wrapped ZETA',
  }),
  [EvmChainId.CRONOS]: new EvmToken({
    chainId: EvmChainId.CRONOS,
    address: WNATIVE_ADDRESS[EvmChainId.CRONOS],
    decimals: 18,
    symbol: 'WCRO',
    name: 'Wrapped CRO',
  }),
  [EvmChainId.BLAST]: WETH9[EvmChainId.BLAST],
  [EvmChainId.SKALE_EUROPA]: new EvmToken({
    // Skale Europa does not have a wrapped native token, using zero address
    chainId: EvmChainId.SKALE_EUROPA,
    address: WNATIVE_ADDRESS[EvmChainId.SKALE_EUROPA],
    decimals: 0,
    symbol: 'WsFUEL',
    name: 'Wrapped sFUEL',
  }),
  [EvmChainId.ROOTSTOCK]: WRBTC[EvmChainId.ROOTSTOCK],
  [EvmChainId.MANTLE]: new EvmToken({
    chainId: EvmChainId.MANTLE,
    address: WNATIVE_ADDRESS[EvmChainId.MANTLE],
    decimals: 18,
    symbol: 'WMNT',
    name: 'Wrapped MNT',
  }),
  [EvmChainId.MANTA]: WETH9[EvmChainId.MANTA],
  [EvmChainId.MODE]: WETH9[EvmChainId.MODE],
  [EvmChainId.TAIKO]: WETH9[EvmChainId.TAIKO],
  [EvmChainId.ZKLINK]: WETH9[EvmChainId.ZKLINK],
  [EvmChainId.APE]: new EvmToken({
    chainId: EvmChainId.APE,
    address: WNATIVE_ADDRESS[EvmChainId.APE],
    decimals: 18,
    symbol: 'WAPE',
    name: 'Wrapped Ape',
  }),
  [EvmChainId.SONIC]: new EvmToken({
    chainId: EvmChainId.SONIC,
    address: WNATIVE_ADDRESS[EvmChainId.SONIC],
    decimals: 18,
    symbol: 'wS',
    name: 'Wrapped Sonic',
  }),
  [EvmChainId.HEMI]: WETH9[EvmChainId.HEMI],
  [EvmChainId.TATARA]: WETH9[EvmChainId.TATARA],
  [EvmChainId.KATANA]: WETH9[EvmChainId.KATANA],
  [EvmChainId.HYPEREVM]: new EvmToken({
    chainId: EvmChainId.HYPEREVM,
    address: WNATIVE_ADDRESS[EvmChainId.HYPEREVM],
    decimals: 18,
    symbol: 'WHYPE',
    name: 'Wrapped HYPE',
  }),
} as const satisfies Record<EvmChainId, EvmToken>

export const isWNativeSupported = (chainId: EvmChainId) =>
  WNATIVE_ADDRESS[chainId] !== zeroAddress

export function isWrapOrUnwrap({
  from,
  to,
}: { from: EvmCurrency; to: EvmCurrency }): boolean {
  if (from.type === 'native' && from.wrap().isSame(to)) {
    return true
  }

  return to.type === 'native' && to.wrap().isSame(from)
}
