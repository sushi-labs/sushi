import { EvmChainId } from './id.js'

export const EvmChainKey = {
  [EvmChainId.ARBITRUM]: 'arbitrum',
  [EvmChainId.ARBITRUM_NOVA]: 'arbitrum-nova',
  [EvmChainId.ARBITRUM_TESTNET]: 'arbitrum-testnet',
  [EvmChainId.AVALANCHE]: 'avalanche',
  [EvmChainId.AVALANCHE_TESTNET]: 'avalance-testnet',
  [EvmChainId.BSC]: 'bsc',
  [EvmChainId.BSC_TESTNET]: 'bsc-testnet',
  [EvmChainId.CELO]: 'celo',
  [EvmChainId.ETHEREUM]: 'ethereum',
  [EvmChainId.FANTOM]: 'fantom',
  [EvmChainId.FANTOM_TESTNET]: 'fantom-testnet',
  [EvmChainId.FUSE]: 'fuse',
  [EvmChainId.GÃ–RLI]: 'goerli',
  [EvmChainId.HARMONY]: 'harmony',
  // [EvmChainId.HARMONY_TESTNET]: 'harmony-testnet',
  [EvmChainId.HECO]: 'heco',
  // [EvmChainId.HECO_TESTNET]: 'heco-testnet',
  // [EvmChainId.KOVAN]: 'kovan',
  // [EvmChainId.ROPSTEN]: 'ropsten',
  [EvmChainId.POLYGON]: 'polygon',
  [EvmChainId.POLYGON_TESTNET]: 'matic-testnet',
  [EvmChainId.MOONBEAM]: 'moonbeam',
  // [EvmChainId.MOONBEAM_TESTNET]: 'moonbeam-testnet',
  [EvmChainId.MOONRIVER]: 'moonriver',
  [EvmChainId.OKEX]: 'okex',
  // [EvmChainId.OKEX_TESTNET]: 'okex-testnet',
  [EvmChainId.PALM]: 'palm',
  // [EvmChainId.PALM_TESTNET]: 'palm-testnet',
  // [EvmChainId.RINKEBY]: 'rinkeby',
  [EvmChainId.TELOS]: 'telos',
  [EvmChainId.GNOSIS]: 'gnosis',
  [EvmChainId.OPTIMISM]: 'optimism',
  [EvmChainId.KAVA]: 'kava',
  [EvmChainId.METIS]: 'metis',
  [EvmChainId.BOBA]: 'boba',
  [EvmChainId.BOBA_AVAX]: 'boba-avax',
  [EvmChainId.BOBA_BNB]: 'boba-bnb',
  [EvmChainId.BTTC]: 'bttc',
  // [EvmChainId.CONSENSUS_ZKEVM_TESTNET]: 'consensus-zkevm-testnet',
  // [EvmChainId.SCROLL_ALPHA_TESTNET]: 'scroll-alpha-testnet',
  // [EvmChainId.BASE_TESTNET]:'base-testnet',
  [EvmChainId.POLYGON_ZKEVM]: 'polygon-zkevm',
  [EvmChainId.THUNDERCORE]: 'thundercore',
  [EvmChainId.HAQQ]: 'haqq',
  [EvmChainId.CORE]: 'core',
  [EvmChainId.ZKSYNC_ERA]: 'zksync-era',
  [EvmChainId.LINEA]: 'linea',
  [EvmChainId.BASE]: 'base',
  [EvmChainId.FILECOIN]: 'filecoin',
  [EvmChainId.SEPOLIA]: 'sepolia',
  [EvmChainId.SCROLL]: 'scroll',
  [EvmChainId.ZETACHAIN]: 'zetachain',
  [EvmChainId.CRONOS]: 'cronos',
  [EvmChainId.BLAST]: 'blast',
  [EvmChainId.SKALE_EUROPA]: 'skale-europa',
  [EvmChainId.ROOTSTOCK]: 'rootstock',
  [EvmChainId.MANTLE]: 'mantle',
  [EvmChainId.CURTIS]: 'curtis',
  [EvmChainId.MANTA]: 'manta',
  [EvmChainId.MODE]: 'mode',
  [EvmChainId.TAIKO]: 'taiko',
  [EvmChainId.ZKLINK]: 'zklink',
  [EvmChainId.APE]: 'ape',
  [EvmChainId.SONIC]: 'sonic',
  [EvmChainId.HEMI]: 'hemi',
} as const satisfies Record<EvmChainId, string>
export type EvmChainKey = (typeof EvmChainKey)[keyof typeof EvmChainKey]

export const EvmNetworkNameKey = Object.fromEntries(
  Object.entries(EvmChainKey).map(([key, value]) => [value, Number(key)]),
) as { [key in EvmChainKey]: EvmChainId }

export const isEvmNetworkNameKey = (key: string): key is EvmChainKey =>
  Object.keys(EvmNetworkNameKey).includes(key)
